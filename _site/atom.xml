<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Olivier von Dach</title>
 <link href="http://localhost:4000/atom.xml" rel="self"/>
 <link href="http://localhost:4000/"/>
 <updated>2021-12-30T18:38:46+01:00</updated>
 <id>http://localhost:4000</id>
 <author>
   <name>Olivier von Dach</name>
   <email>olivier.vondach@gmail.com</email>
 </author>

 
 <entry>
   <title>About me</title>
   <link href="http://localhost:4000/2021/12/01/about-me/"/>
   <updated>2021-12-01T00:00:00+01:00</updated>
   <id>http://localhost:4000/2021/12/01/about-me</id>
   <content type="html">&lt;p&gt;Software designer and developer engineer for twenty years in large companies, with a focus this last decade on JVM (Java, Spring, Kotlin, Scala) and Web (Angular) technologies.&lt;/p&gt;

&lt;p&gt;The spirit of the craftsman animates my daily work, quality is not an option, and technical excellence matters.&lt;/p&gt;

&lt;p&gt;Since the beginning of my career, I have advocated the development of well-designed software as a medium and long-term investment to combine human and economic benefits by improving the developer’s experience and the company’s responsiveness to the market.&lt;/p&gt;

&lt;p&gt;Collaborative work with domain experts, Event-storming, Specification by example, Domain-Driven Design, Test-Driven Development, SOLID principles, Design patterns, OO and Functional paradigms, Clean, Reactive, distributed architectures, the Actor model, are ingredients I like to use in order to tackle domain complexity, delight elegant code writing, and apprehend the non-functional aspects of demanding systems.&lt;/p&gt;

&lt;p&gt;Coaching, presenting, and drawing activities allow me to satisfy my natural need to transmit knowledge and thus to contribute to the development of IT teams’ skills.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Behaviour-Driven Development for better software products</title>
   <link href="http://localhost:4000/2021/05/31/bdd_for_better_products/"/>
   <updated>2021-05-31T00:00:00+02:00</updated>
   <id>http://localhost:4000/2021/05/31/bdd_for_better_products</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;../public/images/bdd_for_better_products/everybody_aligned.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We need to minimize friction due to misunderstandings between software development and software specification teams, proposing an innovative approach for software specification. This one should facilitate the common understanding and encourage each stakeholder’s accountability, product person, software engineer, test engineer, in the quality of the delivered increments.&lt;/p&gt;

&lt;h2 id=&quot;structure&quot;&gt;Structure&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;The &lt;strong&gt;first&lt;/strong&gt; part sets the current context with the traditional approach based on the usual agile tools and roles, illustrating some issues and suggesting remedies.&lt;/li&gt;
  &lt;li&gt;The &lt;strong&gt;second&lt;/strong&gt; part outlines Behaviour-Driven Development (BDD) as a recognised software crafting technique that can address the issues listed.&lt;/li&gt;
  &lt;li&gt;The &lt;strong&gt;third&lt;/strong&gt; part explains the concrete implementation of this technique.&lt;/li&gt;
  &lt;li&gt;The &lt;strong&gt;fourth&lt;/strong&gt; part provides immediately usable material for trying it out.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;your-feedback&quot;&gt;Your feedback&lt;/h2&gt;

&lt;p&gt;Enjoy your reading and please spend a little more time once you have finished to give me &lt;a href=&quot;https://forms.gle/iYuWQGJEWSqVBTR8A&quot;&gt;your feedback on this article&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;A discussion about this article can also take place &lt;a href=&quot;https://github.com/edgelaboratories/blog/discussions/3&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;context&quot;&gt;Context&lt;/h2&gt;

&lt;h3 id=&quot;traditional-approach&quot;&gt;Traditional approach&lt;/h3&gt;

&lt;h4 id=&quot;backlog-building&quot;&gt;Backlog building&lt;/h4&gt;

&lt;p&gt;The product owner listens to customer needs, he owns and manages a product backlog composed of features that extend the current product capabilities or current system behaviour.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../public/images/bdd_for_better_products/product_owner_customer.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;features-understanding&quot;&gt;Features understanding&lt;/h4&gt;

&lt;p&gt;The product owner explains the expected system behaviour to software and test engineers; they try to align their mental representation with the product owner’s one challenging him with their perspective during backlog grooming or feature kick-off sessions.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../public/images/bdd_for_better_products/product_owner_devteam.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;software-delivery&quot;&gt;Software delivery&lt;/h4&gt;

&lt;p&gt;Every delivered functional increment is verified by the test engineer; he checks the completeness and the correctness, and with the best effort, the absence of regression. Anomalies are returned to the development team for the next delivery.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../public/images/bdd_for_better_products/software_delivery.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;some-weaknesses-and-remedies&quot;&gt;Some weaknesses and remedies&lt;/h3&gt;

&lt;h4 id=&quot;anomalies&quot;&gt;Anomalies&lt;/h4&gt;

&lt;p&gt;Anomalies due to misalignments or lack of quality in the realisation can cause time-consuming ping-pong loops.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Could an innovative approach that re-establishes a contractual element encourage greater accountability of each stakeholder for the quality of delivery?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../public/images/bdd_for_better_products/unefficient_software_development.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;cost-of-regression-tests&quot;&gt;Cost of regression tests&lt;/h4&gt;

&lt;p&gt;The testing activity usually focuses on checking newly added features and regressions. Regression testing activity is time-consuming and should be automatized, or unfortunately, may be shortened to well-selected tests.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Could we innovate on the tester’s activity by automating it and giving him more impact upstream?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../public/images/bdd_for_better_products/minimal_testing_coverage.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;loss-of-trust&quot;&gt;Loss of trust&lt;/h4&gt;

&lt;p&gt;Anomalies, regressions, misalignments can have a bad impact on the already established trust towards the product itself, outside or even inside the product team.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Could a collaborative approach that promotes shared accountability, transparency and regular feedback during implementation build trust?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../public/images/bdd_for_better_products/trust.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;tunnel-effect&quot;&gt;Tunnel effect&lt;/h4&gt;

&lt;p&gt;The absence of testable delivery for a couple of time means less feedback, hence less opportunity to react to any misalignment.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Could the division of a feature into several deliverables containing one or more scenarios facilitate deliveries and thus feedback possibilities?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../public/images/bdd_for_better_products/tunnel_effect.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;lack-of-documentation&quot;&gt;Lack of documentation&lt;/h4&gt;

&lt;p&gt;What does the system solve? What are the features? What are the nominal and edge scenarios? What about testing evidence?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://agilemanifesto.org/&quot;&gt;Agile software development manifesto&lt;/a&gt; aims to privilege working software over comprehensive documentation. Therefore, the sources of documentation about &lt;strong&gt;what&lt;/strong&gt; the developed system solves are production code, test code and mental and often distributed knowledge. Consequently, more pressure is put on well-crafted code. In addition, narrative sources of documentation can still be valuable for setting the context, but they are usually written at a high level and may no longer be aligned with the behaviour of the completed system.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Could a collaborative approach restore a lightweight, human-readable digital artefact that contractually formalises common understanding and be a source of living documentation that provides features and testing evidence?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../public/images/bdd_for_better_products/living_documentation.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;bdd&quot;&gt;BDD&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Behaviour-Driven Development&lt;/strong&gt; (BDD) is a software development technique with the main promise to facilitate shared understanding and optimise software deliveries’ functional quality.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../public/images/bdd_for_better_products/tres_amigos.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;secure-software-development&quot;&gt;Secure software development&lt;/h3&gt;

&lt;p&gt;This technique helps to develop securely &lt;strong&gt;the right thing&lt;/strong&gt;, which is the expected system behaviour, and without causing functional regression.&lt;/p&gt;

&lt;h3 id=&quot;contract-driven&quot;&gt;Contract-driven&lt;/h3&gt;

&lt;p&gt;This technique proposes a context for &lt;strong&gt;collaborative specification&lt;/strong&gt; which aims to establish shared understanding of the expected system behaviour, and formalising this latter as a readable &lt;strong&gt;contractual and executable specification&lt;/strong&gt; on which acceptance tests can be defined.&lt;/p&gt;

&lt;h3 id=&quot;domain-driven&quot;&gt;Domain-driven&lt;/h3&gt;

&lt;p&gt;The issued specification artefact uses a natural language based on the &lt;strong&gt;domain language&lt;/strong&gt; which is naturally understandable by every stakeholder: product person, software and test engineers.&lt;/p&gt;

&lt;h3 id=&quot;documentation-driven&quot;&gt;Documentation-driven&lt;/h3&gt;

&lt;p&gt;This artefact written with &lt;a href=&quot;https://specflow.org/gherkin-editor&quot;&gt;Gherkin&lt;/a&gt; syntax explains the system behaviour &lt;strong&gt;based on examples&lt;/strong&gt; grouped in scenarios that describe the system use cases and the business rules.&lt;/p&gt;

&lt;p&gt;Here is an example that uses a generic scenario to describe the behaviour of a calculation function; the &lt;em&gt;Examples&lt;/em&gt; section defines the input and output values:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Rule: The stress amplitude is the ratio between shock values of two stress driver shocks.

    Scenario Outline: Return expected stress amplitude for compatible shock types

      Given a stress shock
        | driver-key   | shock-type   | shock-value   |
        | &amp;lt;driver-key&amp;gt; | &amp;lt;shock-type&amp;gt; | &amp;lt;shock-value&amp;gt; |
      And another stress shock
        | driver-key   | shock-type       | shock-value       |
        | &amp;lt;driver-key&amp;gt; | &amp;lt;ref-shock-type&amp;gt; | &amp;lt;ref-shock-value&amp;gt; |
      When calculating amplitude
      Then the returned amplitude is &amp;lt;amplitude&amp;gt;
      
      Examples:
        | driver-key | shock-type | shock-value | ref-shock-type | ref-shock-value | amplitude |
        | Equity-USA | RELATIVE   | 0.15        | RELATIVE       | 0.10            | 1.5       |
        | Equity-USA | RELATIVE   | 0.25        | RELATIVE       | 0.10            | 2.5       |
        | Equity-USA | RELATIVE   | -0.15       | RELATIVE       | 0.10            | -1.5      |
        | Equity-USA | ABSOLUTE   | 3           | ABSOLUTE       | 2               | 1.5       |
        | Equity-USA | ABSOLUTE   | 2           | ABSOLUTE       | 3               | 0.6667    |
        | Equity-USA | ABSOLUTE   | 2           | RELATIVE       | 0.10            | -         |
        | Equity-USA | RELATIVE   | 0.15        | ABSOLUTE       | 2               | -         |
        | Equity-USA | RELATIVE   | 0.15        | RELATIVE       | 0               | -         |
        | Equity-USA | ABSOLUTE   | 2           | ABSOLUTE       | 0               | -         |
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;More BDD scenarios:
&lt;a href=&quot;https://github.com/vondacho/arch-blueprint-kotlin/tree/master/src/test/resources/features&quot;&gt;Blueprint API (Kotlin)&lt;/a&gt;,&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;test-driven&quot;&gt;Test-driven&lt;/h3&gt;

&lt;p&gt;Coupled with &lt;strong&gt;Acceptance Test-Driven Development&lt;/strong&gt; (ATDD), an outside-in software development technique, the software engineer automates the test cases and can be driven to the completeness, correctness, and the absence of functional regression when developing a feature increment.&lt;/p&gt;

&lt;p&gt;BDD was originally named in 2003 by &lt;a href=&quot;https://dannorth.net/introducing-bdd&quot;&gt;Dan North&lt;/a&gt; as a response to test-driven development (TDD), including acceptance test or customer test-driven development practices as found in extreme programming.&lt;/p&gt;

&lt;h2 id=&quot;bdd-in-practice&quot;&gt;BDD in practice&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;../public/images/bdd_for_better_products/bdd_in_practice.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Specification by example&lt;/strong&gt; activity facilitates a common understanding of expected behaviour based on examples. It applies to a large set of use cases of any domain: calculation, aggregation, orchestration, eventing, management, workflow.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Specification by example activity is done during &lt;strong&gt;Example Mapping&lt;/strong&gt; sessions.&lt;/li&gt;
  &lt;li&gt;Formalisation of expected system behaviour is done with &lt;strong&gt;acceptance scenarios&lt;/strong&gt; expressed with &lt;strong&gt;domain language&lt;/strong&gt; and formalized with &lt;a href=&quot;https://specflow.org/gherkin-editor&quot;&gt;Gherkin&lt;/a&gt; syntax.&lt;/li&gt;
  &lt;li&gt;It requires practice; finding &lt;strong&gt;good wording&lt;/strong&gt; have to be learned by doing; efficient wording can be easily understood, can be validated, and can be automatized.&lt;/li&gt;
  &lt;li&gt;Automatization means the development of &lt;strong&gt;automatized acceptance tests&lt;/strong&gt; enabled by using &lt;strong&gt;glue code&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Development of production code is then &lt;strong&gt;driven by existing acceptance tests&lt;/strong&gt; (ATDD).&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;three-amigos&quot;&gt;Three amigos&lt;/h3&gt;

&lt;p&gt;The conversations in the Specification by Example activity are the result of the interaction of three actors with different perspectives, brought together for the same purpose: &lt;strong&gt;Product person&lt;/strong&gt; or domain expert, &lt;strong&gt;software engineer, and test engineer&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../public/images/bdd_for_better_products/three_amigos.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The Product person should be the product owner; the Domain expert (business analyst, domain architect, or business owner) can be a substitute of the Product person; the Customer can be an optional stakeholder.&lt;/p&gt;

&lt;h3 id=&quot;example-mapping&quot;&gt;Example mapping&lt;/h3&gt;

&lt;p&gt;An &lt;a href=&quot;https://cucumber.io/blog/bdd/example-mapping-introduction/&quot;&gt;Example mapping&lt;/a&gt; session facilitates &lt;strong&gt;structured conversations&lt;/strong&gt; between the three amigos.&lt;/p&gt;

&lt;p&gt;It allows identifying user stories, open questions, business rules, and examples.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../public/images/bdd_for_better_products/example_mapping_xebia.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://www.xebia.com/blog/example-mapping-steering-the-conversation/&quot;&gt;xebia.com/blog/example-mapping-steering-the-conversation&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;feature-story-business-rule-scenario-example&quot;&gt;Feature, story, business rule, scenario, example&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;One &lt;strong&gt;feature&lt;/strong&gt; is explained by one or more scenarios grouped in stories.&lt;/li&gt;
  &lt;li&gt;One &lt;strong&gt;story&lt;/strong&gt; usually groups one or more scenarios and represents a feature increment with business value.&lt;/li&gt;
  &lt;li&gt;One &lt;strong&gt;business rule&lt;/strong&gt; is usually supported by one or more scenarios or examples.&lt;/li&gt;
  &lt;li&gt;One &lt;strong&gt;scenario&lt;/strong&gt; is supported by one or more &lt;strong&gt;examples&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;One scenario by nominal case.&lt;/li&gt;
  &lt;li&gt;One scenario by edge case.&lt;/li&gt;
  &lt;li&gt;One scenario by negative or error case.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;scenarios-writing&quot;&gt;Scenarios writing&lt;/h3&gt;

&lt;p&gt;Writing scenarios helps to build up the common ubiquitous language in a way that &lt;strong&gt;everyone can understand and validate&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;As it requires some experience and a particular way of thinking, it is recommended to let this activity to the test engineer or the software engineer. Feedback by the Product person can be done once they have drafted the &lt;a href=&quot;https://specflow.org/gherkin-editor&quot;&gt;Gherkin&lt;/a&gt; specification.&lt;/p&gt;

&lt;p&gt;A scenario is composed of a set of &lt;strong&gt;preconditions&lt;/strong&gt; about the initial state or context, then a set of &lt;strong&gt;actions&lt;/strong&gt; (usually one), then a set of &lt;strong&gt;assertions&lt;/strong&gt; (or postconditions) about the final state or context.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Feature: To be able to manage a set of existing clients in a persistent way

  Background:
    Given a following set of existing clients
      | model-id | id                                   | name    | internal | prospect | owners | tags   | creation-date       |
      | 1        | ce751f30-217a-422c-b81b-8f75df4917b6 | client1 | true     | false    | x      | key1:a | 2020-10-10T12:00:00 |
      | 2        | 29e364b9-f5ef-43d9-9f30-e07a30b73e01 | client2 | true     | true     | -      | -      | 2020-10-09T12:00:00 |

  Rule: An existing client is a persisted resource in the system.

    Scenario: Add a new client to the existing clients

      Given a following set of client attributes
        | name | prospect | owners | tags            |
        | test | true     | owner1 | key:test,key1:a |
      And the next identifier is afd9ce9f-ee0e-4547-8c77-3cc43ec85dbc
      And the next timestamp is 2020-10-11T12:00:00
      When registering the new client
      Then the response status is CREATED
      And the attributes of the returned client are the following
        | id                                   | name | prospect | owners | tags            | creation-date       |
        | afd9ce9f-ee0e-4547-8c77-3cc43ec85dbc | test | true     | owner1 | key:test,key1:a | 2020-10-11T12:00:00 |
      And the returned client is added to the set of existing clients
      And no export of the configuration has been triggered
      And a Slack notification has been sent
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;More BDD scenarios:
&lt;a href=&quot;https://github.com/vondacho/arch-blueprint-kotlin/tree/master/src/test/resources/features&quot;&gt;Blueprint API (Kotlin)&lt;/a&gt;,&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;scenarios-validation&quot;&gt;Scenarios validation&lt;/h3&gt;

&lt;p&gt;Every scenario has to be validated by every stakeholder or amigo, that it describes an expected facet of the system behaviour. As a result, shared understanding is materialized into a digital set of acceptance scenarios that establish a &lt;strong&gt;contract between all stakeholders&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;These &lt;strong&gt;acceptance scenarios&lt;/strong&gt; are the foundation of an executable specification and the building blocks for the definition of acceptance tests.&lt;/p&gt;

&lt;h3 id=&quot;acceptance-testing&quot;&gt;Acceptance testing&lt;/h3&gt;

&lt;p&gt;Acceptance tests support &lt;strong&gt;high-level functional testing&lt;/strong&gt; which includes testing of new feature increment and regression testing.&lt;/p&gt;

&lt;p&gt;This activity is usually done by a test engineer of a quality insurance team to validate a delivered feature increment before its deployment to production.&lt;/p&gt;

&lt;p&gt;Non-functional requirements could be tested by specific acceptance tests.&lt;/p&gt;

&lt;h3 id=&quot;atdd&quot;&gt;ATDD&lt;/h3&gt;

&lt;p&gt;ATDD is a &lt;strong&gt;test-driven development technique&lt;/strong&gt; based on &lt;strong&gt;acceptance tests&lt;/strong&gt; used by the software engineer for driving its development to the expected system behaviour.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Given an acceptance scenario, a failing acceptance test is written first, then the software engineer writes the minimal production code to make it pass. This action is repeated with a next acceptance scenario, coupled with a refactoring phase applied to both test and production code, to take care of well-crafted code and design.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;This cycle executed at the feature level contains an inner TDD cycle performed at the component level, this technique is named Outside-in TDD.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;bdd-and-atdd&quot;&gt;BDD and ATDD&lt;/h3&gt;

&lt;p&gt;ATDD is used with BDD to &lt;strong&gt;automate acceptance scenarios&lt;/strong&gt;: one scenario gives one acceptance test.&lt;/p&gt;

&lt;h3 id=&quot;bdd-glue-code-test-code-and-production-code&quot;&gt;BDD glue code, test code, and production code&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Test code&lt;/strong&gt; implements acceptance tests and interacts with the &lt;strong&gt;production code&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;BDD &lt;strong&gt;glue code&lt;/strong&gt; implements the mapping of BDD steps writen in natural language into test code.&lt;/li&gt;
  &lt;li&gt;BDD steps are mapped by BDD glue code into test code writen in a given technology.&lt;/li&gt;
  &lt;li&gt;BDD framework (&lt;a href=&quot;https://cucumber.io/docs/guides/overview/&quot;&gt;Cucumber&lt;/a&gt;, &lt;a href=&quot;https://behave.readthedocs.io/en/stable/&quot;&gt;Behave&lt;/a&gt;) traverses the steps and automatizes the execution of the test code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;../public/images/bdd_for_better_products/execution.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Given&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;a stress shock&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// glue code&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;oneShock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TestShock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// glue code&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;// test code: fixture&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;one-stress-shock&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Given&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;another stress shock&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// glue code&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;anotherShock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TestShock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// glue code&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;// test code: fixture&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;other-stress-shock&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;shock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;first&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@When&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;calculating amplitude&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// glue code&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;calculateAmplitude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// glue code&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;// test code: action&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestShock&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;byId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;one-stress-shock&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestShock&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;byId&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;other-stress-shock&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;runCatching&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
    	&lt;span class=&quot;nc&quot;&gt;AmplitudeComputer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;compute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toShock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toShock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// production code&lt;/span&gt;
	 &lt;span class=&quot;p&quot;&gt;}.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;getOrNull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;result-amplitude&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@Then&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;the returned amplitude is {word}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// glue code&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;returnedAmplitudeValueIs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// glue code&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// test code: assertion&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;resultAmplitude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Double&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;byIdOpt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;result-amplitude&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;expectedAmplitude&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toNullable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;toDouble&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resultAmplitude&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resultAmplitude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;isCloseTo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expectedAmplitude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.001&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
        &lt;span class=&quot;nf&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expectedAmplitude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;isNull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;bdd-with-acceptance-test-scope&quot;&gt;BDD with acceptance test, scope&lt;/h3&gt;

&lt;p&gt;Well-written BDD scenarios are done using domain language which is naturally high-level so that one scenario could be automated for targetting either a user interacting with a &lt;strong&gt;frontend application&lt;/strong&gt;, or a &lt;strong&gt;web API&lt;/strong&gt;, or a component that supports &lt;strong&gt;application logic&lt;/strong&gt; or &lt;strong&gt;domain logic&lt;/strong&gt;. A specific glue code developed for each target enables this decoupling.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../public/images/bdd_for_better_products/bdd_at_every_layer.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/vondacho/arch-blueprint-kotlin/tree/master/src/test/kotlin/edu/software/craftsmanship/blueprint/at/client&quot;&gt;Blueprint API - AT at API level&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/vondacho/arch-blueprint-kotlin/tree/master/src/test/kotlin/edu/software/craftsmanship/blueprint/at/problemSolving&quot;&gt;Blueprint API - AT at domain level&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;bdd-with-acceptance-test-vs-xunit-tests&quot;&gt;BDD with acceptance test vs xUnit tests&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Acceptance tests&lt;/strong&gt; are high-level integration tests defined at feature-level. Supported by the natural language and the &lt;a href=&quot;https://specflow.org/gherkin-editor&quot;&gt;Gherkin&lt;/a&gt; syntax, their self-documentation is accessible to every stakeholder and emphasizes the implemented and tested behaviour with its preconditions and postconditions. Acceptance tests usually cover functional requirements, and could check non-functional ones as well. &lt;strong&gt;Smoke tests&lt;/strong&gt; can be supported by a subset of acceptance tests.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;xUnit tests&lt;/strong&gt;, due to their technical aspect, do not connect every stakeholder, hence do not provide evidence of which functional requirements are implemented and tested.&lt;/p&gt;

&lt;h3 id=&quot;bdd-and-agility&quot;&gt;BDD and agility&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Agile&lt;/strong&gt; ideology influences methodologies for iterative development of small increments, enabling quick feedback and adapt.&lt;/p&gt;

&lt;p&gt;Delivering the most valuable scenarios inside one or more stories has a natural priority, then further valuable set of scenarios can be delivered in other increments.&lt;/p&gt;

&lt;p&gt;Scenarios are developed against single acceptance tests which can be executed by a continuous integration tool. This tooling can be configured to monitor which scenarios have been delivered and which ones are still under development. This promotes transparency and enables feedback, early reaction, and prediction towards the deadline.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../public/images/bdd_for_better_products/sesame_bdd_jenkins.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://plugins.jenkins.io/cucumber-reports/&quot;&gt;plugins.jenkins.io/cucumber-reports/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;living-documentation&quot;&gt;Living documentation&lt;/h3&gt;

&lt;p&gt;Living documentation is made possible based on BDD-driven specification with tooling provided by &lt;a href=&quot;https://serenity-bdd.github.io/theserenitybook/latest/living-documentation.html&quot;&gt;Serenity-BDD&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;evidence-of-system-well-being&quot;&gt;Evidence of system well-being&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;With &lt;a href=&quot;https://serenity-bdd.github.io/theserenitybook/latest/index.html&quot;&gt;Serenity-BDD&lt;/a&gt; test execution reports tooling, proof of evidence can be provided to auditors that all requirements covered by the system in place are supported by documented and continuous acceptance tests. It supports Java technology only.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;With &lt;a href=&quot;http://allure.qatools.ru/&quot;&gt;Allure&lt;/a&gt; test execution reports tooling, more evidence can be provided to auditors that testing is done in-depth, even at the lower levels of the test pyramid i.e component integration testing and component unit testing, and uniformly for a couple of technologies (Python/Go/Java/Kotlin).&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;

&lt;h4 id=&quot;outcomes&quot;&gt;Outcomes&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Common understanding&lt;/strong&gt; of expected system behaviour expressed in a domain-oriented ubiquitous language.&lt;/li&gt;
  &lt;li&gt;Enhanced probability that the &lt;strong&gt;implemented thing is the right one&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Human-readable, &lt;strong&gt;contractual and executable specification&lt;/strong&gt; directly useable by every actor of the development team.&lt;/li&gt;
  &lt;li&gt;Scenario-based, use-case-driven and domain-driven &lt;strong&gt;documentation of system behaviour&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Scenario-based organization and &lt;strong&gt;survey of feature development&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;Innovation brought to the &lt;strong&gt;tester role&lt;/strong&gt;, the test engineer can now have a significant impact on the development.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;costs&quot;&gt;Costs&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Time: to attend, organize and facilitate Example mapping meetings&lt;/li&gt;
  &lt;li&gt;Time: to learn one new technique&lt;/li&gt;
  &lt;li&gt;Time: to learn how to write BDD-scenarios&lt;/li&gt;
  &lt;li&gt;Time: to setup a BDD-framework&lt;/li&gt;
  &lt;li&gt;Time: to craft reusable glue code and test code&lt;/li&gt;
  &lt;li&gt;Time + Money: to maintain Gherkin phrasing, glue code and test code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;This technique should reveal itself as a sustainable investment in product quality.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;bdd-material&quot;&gt;BDD material&lt;/h2&gt;

&lt;h3 id=&quot;technical-setup&quot;&gt;Technical setup&lt;/h3&gt;

&lt;p&gt;Ready to use &lt;strong&gt;blueprints&lt;/strong&gt; are available as BDD starters for some technology stack:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/vondacho/arch-blueprint-kotlin&quot;&gt;Kotlin BDD blueprint&lt;/a&gt; (Cucumber)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;h3 id=&quot;literature&quot;&gt;Literature&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://cucumber.io/blog/bdd/example-mapping-introduction/&quot;&gt;Example Mapping&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.manning.com/books/bdd-in-action&quot;&gt;BDD in Action&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://serenity-bdd.github.io/theserenitybook/latest/index.html&quot;&gt;Serenity-BDD book&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;links&quot;&gt;Links&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://cucumber.io/docs/guides/overview/&quot;&gt;Cucumber BDD framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://behave.readthedocs.io/en/stable/&quot;&gt;Behave BDD framework&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://allure.qatools.ru/&quot;&gt;Allure test reporting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 <entry>
   <title>Technical Excellence or the mastery of practices</title>
   <link href="http://localhost:4000/2020/02/22/technical-excellence/"/>
   <updated>2020-02-22T00:00:00+01:00</updated>
   <id>http://localhost:4000/2020/02/22/technical-excellence</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;../../public/images/AdobeStock_183357341_500.jpeg&quot; alt=&quot;Technical Excellence or the mastery of practices&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;a-professional-and-effective-it-team&quot;&gt;A PROFESSIONAL AND EFFECTIVE IT TEAM&lt;/h2&gt;

&lt;p&gt;Excellence represents a high degree of quality, of someone’s value, or something of its kind. This can be applied to a software development team, its agile work process and values, and the software product increments it delivers.&lt;/p&gt;

&lt;p&gt;Constant productivity, frequent deliveries with the expected functional content, serenity in apprehending change, a lower and controlled technical debt, continuous improvement, knowledge sharing, and transparent communication, are the main quality criteria.&lt;/p&gt;

&lt;p&gt;Technical excellence represents the software craftsmanship brought to scale and contributes to the internal and external trust. It involves all actors in an agile development team and all activities from identification and analysis of the need, to test-driven implementation, and continuous delivery of features. It is a prerequisite and sustainable investment for the development of future software products.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Software Craftsmanship is above all a mindset</title>
   <link href="http://localhost:4000/2020/02/22/software-craftsman/"/>
   <updated>2020-02-22T00:00:00+01:00</updated>
   <id>http://localhost:4000/2020/02/22/software-craftsman</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;../../public/images/AdobeStock_183357341_10_percent_100.png&quot; alt=&quot;Software Craftsmanship is above all a mindset&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;analysts-architects-software-developers&quot;&gt;ANALYSTS, ARCHITECTS, SOFTWARE DEVELOPERS&lt;/h2&gt;

&lt;p&gt;The craftsman applies himself and gets involved in his (her) work, he (she) shows passion and determination in the search for the ideal form.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Work on the shape until nothing can be removed or added to it. The form has reached, through the transparency of its expression, its own existence. It is autonomous. A shape must be coherent in its three dimensions and function.
Bernhard Müller – artisan bijoutier – www.bernhard-muller.ch&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;During the analysis, design, and implementation of a software product, he (she) carries out a cycle of iterations by integrating good practices, principles, and patterns. The ideal shape must respect design criteria applied at different levels, from specification to code, architecture, and testing. It must be understandable and easily extended by other actors. Continuous improvement, application, and altruism are the cornerstones of this artisanal spirit.&lt;/p&gt;
</content>
 </entry>
 
 <entry>
   <title>Clean Code - Serenity and economy</title>
   <link href="http://localhost:4000/2020/02/15/clean-code-serenity-economy/"/>
   <updated>2020-02-15T00:00:00+01:00</updated>
   <id>http://localhost:4000/2020/02/15/clean-code-serenity-economy</id>
   <content type="html">&lt;p&gt;&lt;img src=&quot;../../public/images/AdobeStock_102743818_745_500.jpeg&quot; alt=&quot;Clean Code - Serenity and economy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This series of articles is mainly aimed at software developers, but the form remains readable for business analysts and management actors, they will understand the importance of quality code at the company level as well as their role as quality agents or influencers.&lt;/p&gt;

&lt;h2 id=&quot;digital-accelerator&quot;&gt;Digital accelerator&lt;/h2&gt;

&lt;p&gt;Software code is a fundamental element in the functioning of a modern company. Business processes have become definitively dependent on software components that automate all or part of manual activities. Software is an important part of the company’s success and must meet expectations by being an accelerator and not a digital retarder. Finally, the software works with software code produced by one or more software development teams.&lt;/p&gt;

&lt;h2 id=&quot;the-truth&quot;&gt;The truth&lt;/h2&gt;

&lt;p&gt;In an agile environment, the documentation of a feature is usually non-exhaustive and reduced to the essentials. Indeed, collaborative analysis of requirements is facilitated by focusing on interactions between stakeholders: domain experts and software technicians. As the pace of change does not allow for regular maintenance of this even light documentation, the software code naturally becomes the holder of the truth about the behavior of the system concerned, eventually constituting the most reliable source of information.&lt;/p&gt;

&lt;h2 id=&quot;in-motion&quot;&gt;In motion&lt;/h2&gt;

&lt;p&gt;The reality of the digital market implies an acceleration in the pace of demand and the need to be able to continuously deliver value or increments of value-added digital products. Software code must, therefore, have intrinsic qualities to adapt and evolve. Clarity and organization of software code are important levers to reduce change inertia or the magnitude of change during maintenance.&lt;/p&gt;

&lt;h2 id=&quot;advantage-or-burden&quot;&gt;Advantage or burden&lt;/h2&gt;

&lt;p&gt;For a software development team, for a digital company, software code is usually experienced as an advantage or a burden, an asset or debt, a sustainable base of opportunities or a cost center. Quality software code is a recognized ingredient to combine &lt;strong&gt;serenity&lt;/strong&gt; and &lt;strong&gt;economy&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;social&quot;&gt;Social&lt;/h2&gt;

&lt;p&gt;Software code is the result of a joint analysis, design and implementation work between several responsible business and technical actors.&lt;/p&gt;

&lt;p&gt;It is also an important emotional source; a well-designed code creates a positive, stimulating and reassuring feeling when reading or reviewing it because the author’s intentions are quickly understood and future extension work can be considered calmly; a feeling of excitement when the effects of change are minimal, which naturally induces an additional motivation to sustain the acquired quality.&lt;/p&gt;

&lt;p&gt;When writing software code, the author’s empathy towards receivers and future writers is a sign of kindness and professionalism.&lt;/p&gt;

&lt;h2 id=&quot;sustainable-software-development&quot;&gt;Sustainable software development&lt;/h2&gt;

&lt;p&gt;Optimizing writing time, developing more calmly and ensuring constant productivity are the effects of the desired evolution in the way software code is designed. Do no longer develop simply to deliver but opt for sustainable development. Favor collaborative practices of analysis, design, and writing. These are accessible and adapted solutions to address this objective.&lt;/p&gt;

&lt;h2 id=&quot;well-crafted-code-and-interactivity&quot;&gt;Well-crafted code and interactivity&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Clean Code&lt;/strong&gt; refers to quality software code and editorial practice that are entirely under the control of the software developers and can be configured as desired. It is a question of collectively defining some principles of writing and software design, of thinking before coding, of sharing the reflection and of asking for feedback. The code does not belong to anyone but to the company. We must now think “community”.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Clean Code can be read and enhanced by a developer other than its original author – Robert C. Martin&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well-crafted code can be defined by the following intrinsic qualities:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Readability&lt;/li&gt;
  &lt;li&gt;Maintainability&lt;/li&gt;
  &lt;li&gt;Self-documentation&lt;/li&gt;
  &lt;li&gt;Testability&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 

</feed>
